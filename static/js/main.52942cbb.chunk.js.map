{"version":3,"sources":["utils/ArrayUtil.ts","reportWebVitals.ts","modules/material.ts","utils/StringUtil.ts","components/IGridColumn.ts","modules/icons.ts","modules/grid.ts","components/EmptyRecord.tsx","components/internal/AdvancedDataGridBase.tsx","components/ContainerDataGrid.tsx","movies/ChildrenMovie.tsx","movies/DeckListMovie.tsx","utils/FileSystem.ts","components/AdvancedDataGrid.tsx","movies/ResultMovie.tsx","Application.tsx","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","material","ArrayUtil","count","closure","ret","i","push","onlyAlphabets","characters","ALPHABETS","LETTERS","rand","randint","length","StringUtil","IGridColumn","field","options","column","output","sortable","valueGetter","param","value","row","rowIndex","renderCell","renderEditCell","icons","grid","useStyles","makeStyles","theme","createStyles","root","flexDirection","fill","palette","type","fillOpacity","label","marginTop","spacing","AdvancedDataGridBase","props","selection_model_","is_cell_editable_","on_edit_cell_change_committed_","selected","get_uid","editables","Map","commits","columns","isCellEditable","set","onChangeCommitted","size","params","has","get","record","data","find","elem","id","undefined","setSelected","this","child","setState","selectionModel","onSelect","getSelected","DataGrid","DEFAULT_PROPS","map","col","convert","rows","onEditCellChangeCommitted","onSelectionModelChange","handleChange","React","Component","getRowId","autoHeight","density","disableColumnMenu","hideFooterPagination","hideFooterSelectedRowCount","components","NoRowsOverlay","classes","GridOverlay","className","width","height","viewBox","aria-hidden","focusable","fillRule","transform","cx","cy","rx","ry","d","ContainerDataGrid","newbie","create","onCreate","previous","index","findIndex","splice","onErase","Card","CardHeader","title","subheader","Divider","CardContent","disableActions","CardActions","Button","fullWidth","variant","color","onClick","insert","startIcon","AddOutlined","disabled","disableErase","erase","DeleteOutlineOutlined","ChildrenMovie","refresh","headerName","_v","_i","toString","flex","editable","name","children","DeckListMovie","useState","decks","sequence","setSequence","Grid","container","item","xs","getColumns","create_random_deck","random","repeat","AdvancedDataGrid","ResultMovie","deckList","counts","deck","cartesian","CartesianProduct","indexes","forEach","combinate","toLocaleString","fields","Object","keys","content","str","join","f","buffer","iconv","encode","FileSystem","download","CloudDownloadOutlined","Application","Fragment","fileName","blob","Blob","anchor","document","createElement","href","URL","createObjectURL","body","appendChild","dispatchEvent","MouseEvent","removeChild","revokeObjectURL","DATA","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.52942cbb.chunk.js","sourcesContent":["export namespace ArrayUtil\r\n{\r\n    export function repeat<T>(count: number, closure: (index: number) => T): T[]\r\n    {\r\n        const ret: T[] = [];\r\n        for (let i: number = 0; i < count; ++i)\r\n            ret.push(closure(i));\r\n        return ret;\r\n    }\r\n}","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import * as material from \"@material-ui/core\";\r\nexport default material;","import { randint } from \"tstl/algorithm/random\";\r\n\r\nexport namespace StringUtil\r\n{\r\n    export function random(count: number, onlyAlphabets: boolean = false): string\r\n    {\r\n        let characters: string = onlyAlphabets ? ALPHABETS : LETTERS;\r\n        let ret: string = \"\";\r\n\r\n        while (count-- > 0)\r\n        {\r\n            let rand: number = randint(0, characters.length - 1);\r\n            ret += characters[rand];\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    const ALPHABETS: string = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r\n    const LETTERS: string = \"0123456789\" + ALPHABETS;\r\n}","import grid from \"../modules/grid\";\r\n\r\nexport interface IGridColumn<Record extends object, Field extends keyof Record = keyof Record>\r\n    extends Omit<\r\n            grid.GridColDef, \r\n            \"field\"|\"valueGetter\"|\"valueFormatter\"|\"renderCell\"|\"renderEditCell\">\r\n{\r\n    field: Field;\r\n    valueGetter?: (value: Record[Field], record: Record, index: number) => any;\r\n    renderCell?: (value: Record[Field], record: Record, index: number) => any;\r\n    renderEditCell?: (value: Record[Field], record: Record, index: number) => any;\r\n\r\n    isCellEditable?: (value: Record[Field], record: Record, index: number) => boolean;\r\n    onChangeCommitted?: (value: any, record: Record) => void;\r\n}\r\n\r\nexport namespace IGridColumn\r\n{\r\n    export function create<Instance extends object, Key extends keyof Instance>\r\n        (field: Key, options: Omit<IGridColumn<Instance, Key>, \"field\">): IGridColumn<Instance>\r\n    {\r\n        return {\r\n            ...options,\r\n            field\r\n        } as IGridColumn<Instance>;\r\n    }\r\n\r\n    export function convert<Instance extends object, Key extends keyof Instance>\r\n        (column: IGridColumn<Instance, Key>): grid.GridColDef\r\n    {\r\n        const output: grid.GridColDef = {\r\n            ...column,\r\n            field: column.field as string,\r\n            sortable: column.sortable === true\r\n                ? true\r\n                : false\r\n        } as grid.GridColDef;\r\n\r\n        if (column.valueGetter)\r\n            output.valueGetter = param => column.valueGetter!(param.value as any, param.row as any, param.rowIndex);\r\n        if (column.renderCell)\r\n            output.renderCell = param => column.renderCell!(param.value as any, param.row as any, param.rowIndex);\r\n        if (column.renderEditCell)\r\n            output.renderEditCell = param => column.renderEditCell!(param.value as any, param.row as any, param.rowIndex);\r\n\r\n        return output;\r\n    }\r\n}","import * as icons from \"@material-ui/icons\";\r\nexport default icons;","import * as grid from \"@material-ui/data-grid\";\r\nexport default grid;","import grid from \"../modules/grid\";\r\nimport material from \"../modules/material\";\r\n\r\nconst useStyles = material.makeStyles(theme => material.createStyles({\r\n    root: {\r\n        flexDirection: 'column',\r\n        '& .ant-empty-img-1': {\r\n            fill: theme.palette.type === 'light' ? '#aeb8c2' : '#262626',\r\n        },\r\n        '& .ant-empty-img-2': {\r\n            fill: theme.palette.type === 'light' ? '#f5f5f7' : '#595959',\r\n        },\r\n        '& .ant-empty-img-3': {\r\n            fill: theme.palette.type === 'light' ? '#dce0e6' : '#434343',\r\n        },\r\n        '& .ant-empty-img-4': {\r\n            fill: theme.palette.type === 'light' ? '#fff' : '#1c1c1c',\r\n        },\r\n        '& .ant-empty-img-5': {\r\n            fillOpacity: theme.palette.type === 'light' ? '0.8' : '0.08',\r\n            fill: theme.palette.type === 'light' ? '#f5f5f5' : '#fff',\r\n        },\r\n        },\r\n        label: {\r\n            marginTop: theme.spacing(1),\r\n        },\r\n    }\r\n));\r\n\r\nexport function EmptyRecord(): JSX.Element\r\n{\r\n    const classes = useStyles();\r\n    return <grid.GridOverlay className={classes.root}>\r\n      <svg\r\n        width=\"120\"\r\n        height=\"100\"\r\n        viewBox=\"0 0 184 152\"\r\n        aria-hidden\r\n        focusable=\"false\"\r\n      >\r\n        <g fill=\"none\" fillRule=\"evenodd\">\r\n          <g transform=\"translate(24 31.67)\">\r\n            <ellipse\r\n              className=\"ant-empty-img-5\"\r\n              cx=\"67.797\"\r\n              cy=\"106.89\"\r\n              rx=\"67.797\"\r\n              ry=\"12.668\"\r\n            />\r\n            <path\r\n              className=\"ant-empty-img-1\"\r\n              d=\"M122.034 69.674L98.109 40.229c-1.148-1.386-2.826-2.225-4.593-2.225h-51.44c-1.766 0-3.444.839-4.592 2.225L13.56 69.674v15.383h108.475V69.674z\"\r\n            />\r\n            <path\r\n              className=\"ant-empty-img-2\"\r\n              d=\"M33.83 0h67.933a4 4 0 0 1 4 4v93.344a4 4 0 0 1-4 4H33.83a4 4 0 0 1-4-4V4a4 4 0 0 1 4-4z\"\r\n            />\r\n            <path\r\n              className=\"ant-empty-img-3\"\r\n              d=\"M42.678 9.953h50.237a2 2 0 0 1 2 2V36.91a2 2 0 0 1-2 2H42.678a2 2 0 0 1-2-2V11.953a2 2 0 0 1 2-2zM42.94 49.767h49.713a2.262 2.262 0 1 1 0 4.524H42.94a2.262 2.262 0 0 1 0-4.524zM42.94 61.53h49.713a2.262 2.262 0 1 1 0 4.525H42.94a2.262 2.262 0 0 1 0-4.525zM121.813 105.032c-.775 3.071-3.497 5.36-6.735 5.36H20.515c-3.238 0-5.96-2.29-6.734-5.36a7.309 7.309 0 0 1-.222-1.79V69.675h26.318c2.907 0 5.25 2.448 5.25 5.42v.04c0 2.971 2.37 5.37 5.277 5.37h34.785c2.907 0 5.277-2.421 5.277-5.393V75.1c0-2.972 2.343-5.426 5.25-5.426h26.318v33.569c0 .617-.077 1.216-.221 1.789z\"\r\n            />\r\n          </g>\r\n          <path\r\n            className=\"ant-empty-img-3\"\r\n            d=\"M149.121 33.292l-6.83 2.65a1 1 0 0 1-1.317-1.23l1.937-6.207c-2.589-2.944-4.109-6.534-4.109-10.408C138.802 8.102 148.92 0 161.402 0 173.881 0 184 8.102 184 18.097c0 9.995-10.118 18.097-22.599 18.097-4.528 0-8.744-1.066-12.28-2.902z\"\r\n          />\r\n          <g className=\"ant-empty-img-4\" transform=\"translate(149.65 15.383)\">\r\n            <ellipse cx=\"20.654\" cy=\"3.167\" rx=\"2.849\" ry=\"2.815\" />\r\n            <path d=\"M5.698 5.63H0L2.898.704zM9.259.704h4.985V5.63H9.259z\" />\r\n          </g>\r\n        </g>\r\n      </svg>\r\n      <div className={classes.label}>No Rows</div>\r\n    </grid.GridOverlay>;\r\n}","import grid from \"../../modules/grid\";\r\nimport React from \"react\";\r\nimport { get_uid } from \"tstl/functional/uid\";\r\n\r\nimport { EmptyRecord } from \"../EmptyRecord\";\r\nimport { IGridColumn } from \"../IGridColumn\";\r\n\r\nexport class AdvancedDataGridBase<Record extends object, Props extends AdvancedDataGridBase.IProps<Record>>\r\n    extends React.Component<Props>\r\n{\r\n    private selection_model_: number[];\r\n    private readonly is_cell_editable_?: (params: grid.GridCellParams) => boolean;\r\n    private readonly on_edit_cell_change_committed_?: (params: grid.GridEditCellPropsParams) => void;\r\n\r\n    public constructor(props: Props)\r\n    {\r\n        super(props);\r\n        this.selection_model_ = props.selected\r\n            ? [get_uid(props.selected)]\r\n            : [];\r\n\r\n        const editables: Map<keyof Record, CellEditable<Record, keyof Record>> = new Map();\r\n        const commits: Map<keyof Record, EditCellChangeCommitted<Record>> = new Map();\r\n\r\n        for (const column of props.columns)\r\n        {\r\n            if (column.isCellEditable)\r\n                editables.set(column.field, column.isCellEditable);\r\n            if (column.onChangeCommitted)\r\n                commits.set(column.field, column.onChangeCommitted);\r\n        }\r\n\r\n        if (editables.size !== 0)\r\n            this.is_cell_editable_ = params =>\r\n            {\r\n                const field: keyof Record = params.field as keyof Record;\r\n                if (editables.has(field))\r\n                    return editables.get(field)!\r\n                    (\r\n                        params.value as any, \r\n                        params.row as Record, \r\n                        params.rowIndex\r\n                    );\r\n                else\r\n                    return true;\r\n            };\r\n        if (commits.size !== 0)\r\n            this.on_edit_cell_change_committed_ = params =>\r\n            {\r\n                const record: Record | undefined = this.props.data.find(elem => get_uid(elem) === params.id);\r\n                if (record === undefined)\r\n                    return;\r\n\r\n                const closure: EditCellChangeCommitted<Record> | undefined = commits.get(params.field as keyof Record);\r\n                if (closure !== undefined)\r\n                    closure(params.props.value as any, record);\r\n                \r\n                this.setSelected(record);\r\n            };\r\n    }\r\n\r\n    /* -----------------------------------------------------------\r\n        SELECTION\r\n    ----------------------------------------------------------- */\r\n    protected getSelected(): Record | null\r\n    {\r\n        if (this.selection_model_.length === 0)\r\n            return null;\r\n        else\r\n        {\r\n            const record: Record | undefined = this.props.data.find(elem => get_uid(elem) === this.selection_model_[0]);\r\n            return record || null;\r\n        }\r\n    }\r\n\r\n    protected setSelected(child: Record | null): void\r\n    {\r\n        this.selection_model_ = child !== null\r\n            ? [get_uid(child)]\r\n            : [];\r\n        this.setState({});\r\n    }\r\n\r\n    private handleChange(param: grid.GridSelectionModelChangeParams): void\r\n    {\r\n        this.selection_model_ = param.selectionModel as number[];\r\n        this.setState({}, () =>\r\n        {\r\n            if (this.props.onSelect)\r\n                this.props.onSelect(this.getSelected()!);\r\n        });\r\n    }\r\n\r\n    /* -----------------------------------------------------------\r\n        RENDERING\r\n    ----------------------------------------------------------- */\r\n    public render(): JSX.Element\r\n    {\r\n        return <grid.DataGrid {...DEFAULT_PROPS}\r\n            // DATA\r\n            columns={this.props.columns.map(col => IGridColumn.convert(col))}\r\n            rows={this.props.data.map(row => row)}\r\n\r\n            // EDITOR\r\n            isCellEditable={this.is_cell_editable_}\r\n            onEditCellChangeCommitted={this.on_edit_cell_change_committed_}\r\n\r\n            // SELECTION\r\n            onSelectionModelChange={param => this.handleChange(param)}\r\n            selectionModel={this.selection_model_} />\r\n    }\r\n}\r\n\r\nexport namespace AdvancedDataGridBase\r\n{\r\n    export interface IProps<Record extends object>\r\n        extends Omit<grid.DataGridProps,\r\n            \"rows\"|\"columns\"|\"getRowId\"|\r\n            \"isCellEditable\"|\"onEditCellChangeCommitted\"|\r\n            \"onSelectionModelChange\"|\"selectionModel\">\r\n    {\r\n        data: Record[];\r\n        columns: IGridColumn<Record, keyof Record>[];\r\n        onSelect?: (selected: Record | null) => void;\r\n        selected?: Record | null;\r\n    }\r\n}\r\nconst DEFAULT_PROPS =\r\n{\r\n    getRowId: (row: object) => get_uid(row),\r\n    autoHeight: true,\r\n    density: \"compact\" as const,\r\n    disableColumnMenu: true,\r\n    hideFooterPagination: true,\r\n    hideFooterSelectedRowCount: true,\r\n    components: {\r\n        NoRowsOverlay: EmptyRecord\r\n    }\r\n}\r\n\r\ntype CellEditable<Record extends object, Field extends keyof Record> = (value: Record[Field], record: Record, index: number) => boolean;\r\ntype EditCellChangeCommitted<Record extends object> = (value: any, record: Record) => void;","import material from \"../modules/material\";\r\nimport icons from \"../modules/icons\";\r\nimport { AdvancedDataGridBase } from \"./internal/AdvancedDataGridBase\";\r\n\r\nexport class ContainerDataGrid<Record extends object>\r\n    extends AdvancedDataGridBase<Record, ContainerDataGrid.IProps<Record>>\r\n{\r\n    /* -----------------------------------------------------------\r\n        ELEMENTS I/O\r\n    ----------------------------------------------------------- */\r\n    private insert(): void\r\n    {\r\n        const newbie: Record = this.props.create();\r\n        this.props.data.push(newbie);\r\n\r\n        this.setSelected(newbie);\r\n        if (this.props.onSelect)\r\n            this.props.onSelect(newbie);\r\n        if (this.props.onCreate)\r\n            this.props.onCreate(newbie, this.props.data.length - 1);\r\n    }\r\n    \r\n    private erase(): void\r\n    {\r\n        const previous: Record | null = this.getSelected();\r\n        if (previous === null)\r\n            return;\r\n\r\n        const index: number = this.props.data.findIndex(elem => elem === previous);\r\n        if (index === -1)\r\n            return;\r\n\r\n        this.props.data.splice(index, 1);\r\n        this.setSelected(null);\r\n\r\n        if (this.props.onErase)\r\n            this.props.onErase(previous, index);\r\n        if (this.props.onSelect)\r\n            this.props.onSelect(null);\r\n    }\r\n\r\n    /* -----------------------------------------------------------\r\n        RENDERING\r\n    ----------------------------------------------------------- */\r\n    public render(): JSX.Element\r\n    {\r\n        return <material.Card>\r\n            <material.CardHeader \r\n                    title={this.props.title} \r\n                    subheader={this.props.subheader} />\r\n            <material.Divider />\r\n            <material.CardContent>\r\n                {super.render()}\r\n            </material.CardContent>\r\n            {!this.props.disableActions && <material.CardActions>\r\n                <material.Button \r\n                        fullWidth\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        onClick={() => this.insert()}\r\n                        startIcon={ <icons.AddOutlined /> }>\r\n                    Insert\r\n                </material.Button>\r\n                <material.Button fullWidth\r\n                        variant=\"contained\"\r\n                        color=\"secondary\"\r\n                        disabled={this.getSelected() === null || this.props.disableErase === true}\r\n                        onClick={() => this.erase()}\r\n                        startIcon={ <icons.DeleteOutlineOutlined /> }>\r\n                    Erase\r\n                </material.Button>\r\n            </material.CardActions>}\r\n        </material.Card>;\r\n    }\r\n}\r\n\r\nexport namespace ContainerDataGrid\r\n{\r\n    export interface IProps<Record extends object>\r\n        extends AdvancedDataGridBase.IProps<Record>\r\n    {\r\n        title: string;\r\n        subheader: string;\r\n\r\n        create: () => Record;\r\n        disableActions?: boolean;\r\n        disableErase?: boolean;\r\n\r\n        onCreate?: (newbie: Record, index: number) => void;\r\n        onErase?: (oldbiew: Record, index: number) => void;\r\n    }\r\n}","import { ContainerDataGrid } from \"../components/ContainerDataGrid\";\r\nimport { IGridColumn } from \"../components/IGridColumn\";\r\nimport { IDeck } from \"../structures/IDeck\";\r\n\r\nexport function ChildrenMovie(props: ChildrenMovie.IProps): JSX.Element\r\n{\r\n    function create(): IDeck.IChild\r\n    {\r\n        return {\r\n            name: (props.children.length + 1).toString()\r\n        };\r\n    }\r\n\r\n    return <ContainerDataGrid\r\n            title=\"Children List\"\r\n            subheader=\"Edit child item name through double-click\"\r\n            columns={getColumns(props.refresh)}\r\n            data={props.children}\r\n            create={create}\r\n            onCreate={props.refresh}\r\n            onErase={props.refresh}\r\n            disableErase={props.children.length <= 1} />;\r\n}\r\n\r\nexport namespace ChildrenMovie\r\n{\r\n    export interface IProps\r\n    {\r\n        refresh: () => void;\r\n        children: IDeck.IChild[];\r\n    }\r\n}\r\n\r\nfunction getColumns(refresh: () => void): IGridColumn<IDeck.IChild>[]\r\n{\r\n    return [\r\n        {\r\n            headerName: \"No\",\r\n            field: \"no\" as any,\r\n            width: 60,\r\n            valueGetter: (_v, _i, index) => (index+1).toString()\r\n        },\r\n        IGridColumn.create(\"name\", {\r\n            headerName: \"Item Name\",\r\n            flex: 1000,\r\n            editable: true,\r\n            onChangeCommitted: (value, record) => \r\n            {\r\n                record.name = value;\r\n                refresh();\r\n            }\r\n        })\r\n    ];\r\n}","import React from \"react\";\r\nimport material from \"../modules/material\";\r\nimport { get_uid } from \"tstl/functional/uid\";\r\n\r\nimport { ArrayUtil } from \"../utils/ArrayUtil\";\r\nimport { StringUtil } from \"../utils/StringUtil\";\r\n\r\nimport { IDeck as IDeck } from \"../structures/IDeck\";\r\nimport { IGridColumn } from \"../components/IGridColumn\";\r\nimport { ContainerDataGrid } from \"../components/ContainerDataGrid\";\r\n\r\nimport { ChildrenMovie } from \"./ChildrenMovie\";\r\n\r\nexport function DeckListMovie(props: DeckListMovie.IProps)\r\n{\r\n    const [selected, setSelected] = React.useState<IDeck | null>(props.decks.length !== 0 ? props.decks[0] : null);\r\n    const [sequence, setSequence] = React.useState(0);\r\n\r\n    function refresh(): void\r\n    {\r\n        setSequence(sequence + 1);\r\n        props.refresh();\r\n    }\r\n\r\n    return <material.Grid container spacing={2}>\r\n        <material.Grid item xs>\r\n            <ContainerDataGrid\r\n                    title=\"Deck List\"\r\n                    subheader=\"Select a deck to edit children items\"\r\n                    disableErase={props.decks.length <= 1}\r\n                    columns={getColumns(refresh)}\r\n                    data={props.decks} \r\n                    create={create_random_deck}\r\n                    selected={selected}\r\n                    onSelect={setSelected}\r\n                    onCreate={refresh} />\r\n        </material.Grid>\r\n        <material.Grid item xs>\r\n        {selected !== null\r\n            ? <ChildrenMovie key={get_uid(selected)}\r\n                    children={selected.children} \r\n                    refresh={refresh} />\r\n            : null\r\n        }\r\n        </material.Grid>\r\n    </material.Grid>\r\n}\r\nexport namespace DeckListMovie\r\n{\r\n    export interface IProps\r\n    {\r\n        refresh: () => void;\r\n        decks: IDeck[];\r\n    }\r\n}\r\n\r\nfunction getColumns(refresh: () => void): IGridColumn<IDeck>[]\r\n{\r\n    return [\r\n        {\r\n            field: \"no\" as any,\r\n            headerName: \"No\",\r\n            width: 60,\r\n            valueGetter: (_v, _i, index) => (index+1).toString()\r\n        },\r\n        IGridColumn.create(\"name\", {\r\n            headerName: \"Deck Name\",\r\n            flex: 1000,\r\n            editable: true,\r\n            onChangeCommitted: (value, record) => \r\n            {\r\n                record.name = value;\r\n                refresh();\r\n            }\r\n        }),\r\n        IGridColumn.create(\"children\", {\r\n            headerName: \"Children\",\r\n            width: 70,\r\n            valueGetter: children => \"#\" + children.length\r\n        })\r\n    ];\r\n}\r\n\r\nfunction create_random_deck(): IDeck\r\n{\r\n    return {\r\n        name: StringUtil.random(8),\r\n        children: ArrayUtil.repeat(3, index => ({\r\n            name: (index + 1).toString()\r\n        }))\r\n    };\r\n}","export namespace FileSystem\r\n{\r\n    export function download(fileName: string, content: Buffer): void\r\n    {\r\n        const blob: Blob = new Blob([content], { type: \"text/plan\" });\r\n        const anchor: HTMLAnchorElement = document.createElement(\"a\");\r\n        anchor.href = URL.createObjectURL(blob);\r\n        anchor.download = fileName;\r\n\r\n        document.body.appendChild(anchor);\r\n        anchor.dispatchEvent(new MouseEvent(\"click\"));\r\n        document.body.removeChild(anchor);\r\n        URL.revokeObjectURL(anchor.href);\r\n    }\r\n}","import { AdvancedDataGridBase } from \"./internal/AdvancedDataGridBase\";\r\n\r\nexport class AdvancedDataGrid<Record extends object>\r\n    extends AdvancedDataGridBase<Record, AdvancedDataGrid.IProps<Record>>\r\n{\r\n}\r\n\r\nexport namespace AdvancedDataGrid\r\n{\r\n    export type IProps<Record extends object>\r\n        = AdvancedDataGridBase.IProps<Record>;\r\n}","import material from \"../modules/material\";\r\nimport icons from \"../modules/icons\";\r\nimport iconv from \"iconv-lite\";\r\nimport { CartesianProduct } from \"cagen\";\r\n\r\nimport { AdvancedDataGrid } from \"../components/AdvancedDataGrid\";\r\nimport { FileSystem } from \"../utils/FileSystem\";\r\nimport { IDeck } from \"../structures/IDeck\";\r\nimport { IGridColumn } from \"../components/IGridColumn\";\r\n\r\nexport function ResultMovie\r\n    (props: ResultMovie.IProps): JSX.Element\r\n{\r\n    const data: Record<string, string>[] = combinate(props.decks);\r\n\r\n    function download(): void\r\n    {\r\n        if (data.length === 0)\r\n            return;\r\n\r\n        const fields: string[] = Object.keys(data[0]);\r\n        const content: string = fields.map(str => `\"${str}\"`).join(\",\") \r\n            + \"\\n\"\r\n            + data.map(record => fields.map(f => `\"${record[f]}\"`)).join(\"\\n\");\r\n        const buffer: Buffer = iconv.encode(content, \"euc-kr\");\r\n        \r\n        FileSystem.download(\"cartesian.csv\", buffer);\r\n    }\r\n\r\n    return <material.Card>\r\n        <material.CardHeader \r\n                title=\"Result List\"\r\n                subheader={`Number of cases: #${data.length.toLocaleString()}`}>\r\n            \r\n        </material.CardHeader>\r\n        <material.Divider />\r\n        <material.CardContent>\r\n            <AdvancedDataGrid \r\n                    columns={getColumns(props.decks)}\r\n                    data={data} />\r\n        </material.CardContent>\r\n        <material.CardActions>\r\n            <material.Button fullWidth\r\n                    variant=\"contained\"\r\n                    disabled={data.length === 0}\r\n                    onClick={() => download()}\r\n                    startIcon={ <icons.CloudDownloadOutlined /> }>\r\n                Donwload\r\n            </material.Button>\r\n        </material.CardActions>\r\n    </material.Card>;\r\n}\r\n\r\nexport namespace ResultMovie\r\n{\r\n    export interface IProps\r\n    {\r\n        decks: IDeck[];\r\n    }\r\n}\r\n\r\nfunction getColumns(deckList: IDeck[]): IGridColumn<Record<string, string>>[]\r\n{\r\n    return deckList.map(deck => IGridColumn.create(deck.name, \r\n    {\r\n        headerName: deck.name,\r\n        width: 150\r\n    }));\r\n}\r\n\r\nfunction combinate(deckList: IDeck[]): Record<string, string>[]\r\n{\r\n    const counts: number[] = deckList.map(deck => deck.children.length);\r\n    const cartesian: CartesianProduct = new CartesianProduct(...counts);\r\n\r\n    const output: Record<string, string>[] = [];\r\n    for (const indexes of cartesian)\r\n    {\r\n        const record: Record<string, string> = {};\r\n        indexes.forEach((col, row) =>\r\n        {\r\n            const deck: IDeck = deckList[row];\r\n            const child: IDeck.IChild = deck.children[col];\r\n\r\n            record[deck.name] = child.name;\r\n        });\r\n        output.push(record);\r\n    }\r\n    return output;\r\n}","import React from \"react\";\r\n\r\nimport { DeckListMovie } from \"./movies/DeckListMovie\";\r\nimport { ResultMovie } from \"./movies/ResultMovie\";\r\nimport { IDeck } from \"./structures/IDeck\";\r\n\r\nexport function Application(props: Application.IProps): JSX.Element\r\n{\r\n    const [sequence, setSequence] = React.useState(0);\r\n\r\n    function refresh(): void\r\n    {\r\n        setSequence(sequence + 1);\r\n    }\r\n\r\n    return <React.Fragment>\r\n        <DeckListMovie \r\n                refresh={refresh}\r\n                decks={props.decks} />\r\n        <br/>\r\n        <br/>\r\n        <ResultMovie decks={props.decks} />\r\n    </React.Fragment>;\r\n}\r\n\r\nexport namespace Application\r\n{\r\n    export interface IProps\r\n    {\r\n        decks: IDeck[];\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nimport { Application } from './Application';\r\nimport { IDeck } from './structures/IDeck';\r\n\r\nconst DATA: IDeck[] = [\r\n    {\r\n        name: \"시험명\",\r\n        children: [\"Nothing\", \"Everything\"].map(name => ({ name }))\r\n    },\r\n    {\r\n        name: \"시험구\",\r\n        children: [\"서울\", \"부산\", \"강원도\"].map(name => ({ name }))\r\n    }\r\n]\r\n\r\nReactDOM.render\r\n(\r\n    <React.StrictMode>\r\n        <Application decks={DATA} />\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}